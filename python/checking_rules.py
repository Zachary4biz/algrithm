# author: zac
# create-time: 2019/6/14 13:55
# usage: -

import itertools
import re
from collections import deque,defaultdict
import json
import sys

class Node(object):
    """
    DFA‰∏çÈúÄË¶ÅÂèçÊü•,ÊâÄ‰ª•Êú™ËÆ∞ÂΩïÁà∂ËäÇÁÇπ
    Âú®DFA‰∏≠Âè∂Â≠êËäÇÁÇπÊ†áËÆ∞‰∫Ü‰∏Ä‰∏™ËØçÁöÑÁªìÊùüÂ¶Ç, "porn "Âíå"porno"‰∏≠ÁöÑ" "Âíå"o" |
      - ËøôÁßçÁî®Âè∂Â≠êËäÇÁÇπÁõ¥Êé•Ê†áËÆ∞ËØçÊ±áÁªìÊùüÁöÑÂÅöÊ≥ï,‰∏çÂÖºÂÆπ "Êó¢Ë¶ÅÂ±èËîΩA‰πüË¶ÅÂ±èËîΩAB",‰ΩÜÂÖ∂ÂÆû‰ªé‰∏öÂä°ÈÄªËæë‰∏äÊù•ËØ¥,ÂÜô"A"Â∞±‰∏çÁî®"AB",ÂÜô"AB"Ë°®Á§∫Ë¶ÅÁªÜÂàÜÁöÑÈÇ£Â∞±‰∏çÈúÄË¶Å"A"
      - ‰æãÂ¶Ç: " porn "Âíå" porn abc "‰ºöÊää" porn "ÁöÑÊúÄÂêéÁöÑÁ©∫Ê†ºÂä†‰∏ächildren={"a":xxx}
      - ÂÖ∂ÂÆû‰πü‰∏çÊîØÊåÅ "vocab" Âíå "vocabulary"
    """
    def __init__(self, reason=None):
        self.children = None
        self.reason = reason # ‰ªÖend_word==TrueÊó∂ÊúâÂÄº, Ê†áËÆ∞Êüê‰∏™ËØçÊòØ‰ªÄ‰πàÂéüÂõ†Ë¢´Ê†áËÆ∞‰∏∫ÊïèÊÑüËØç
        self.is_end_word = False # Ê†áËÆ∞ËØçÊù°ÁªìÊùü(‰∏çÂÜçÁî®Âè∂Â≠êËäÇÁÇπ‰Ωú‰∏∫ÁªìÊùüÊ†áÂøó)

    def is_leaf_node(self):
        return self.children is None

    def add_child(self,v):
        if self.is_leaf_node():
            self.children = {v:Node()}
        elif v not in self.children:
            self.children[v] = Node()
        else:
            pass # DFAÂ≠êËäÇÁÇπÂ∑≤ÊúâÂàô‰∏çÊõ¥Êñ∞


class DFATree(object):
    def __init__(self):
        self.root = Node()
        self._init_from_file = {
            "json":self._parse_json,
            "csv":self._parse_csv
        }
        self.support_file_type = self._init_from_file.keys()


    def _parse_json(self,path:str):
        with open(path,"r") as f:
            res = json.load(f)
        self.init_from_dict(res)
        return res

    # \tÂàÜÂâ≤ÁêÜÁî±ÂíåËØç,ÈÄóÂè∑ÂÅöËØçÈó¥ÂàÜÂâ≤,Â¶Ç‰∏ã
    # 0\tABC,BCD,ABC EFG
    def _parse_csv(self,path:str):
        res = {}
        with open(path,"r") as f:
            for reason,word_list_str in [line.strip().split("\t") for line in f]:
                res.update({reason:word_list_str.split(",")})
        self.init_from_dict(res)
        return res

    def add_word(self,word_inp,reason,sep = " "):
        word = sep+word_inp+sep
        node = self.root
        for idx, char in enumerate(word):
            node.add_child(char)
            node = node.children[char]
        node.reason = reason
        node.is_end_word = True

    def add_word_CN(self,word_inp,reason):
        self.add_word(word_inp,reason,sep="")

    def add_word_EN(self,word_inp,reason):
        self.add_word(word_inp,reason,sep=" ")

    def init_from_file(self, file_path:str, file_type:str):
        return self._init_from_file[file_type](file_path)


    def init_from_dict(self,watch_list_inp:dict):
        for reason,word_list in watch_list_inp.items():
            for word in word_list:
                self.add_word_EN(word,reason)

    # dfa.getRes(" violence") Ëé∑ÂæóÂ≠óÁ¨¶‰∏≤ÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç"e"ÁöÑNode
    def node_of_last_char(self,ss) -> Node:
        bn = self.root
        for idx,c in enumerate(ss):
            bn = bn.children[c]
        return bn

    # Ê∏ÖÁêÜÂè•Â≠ê‰∏≠ÁöÑÂêÑÁßçÁ¨¶Âè∑
    @staticmethod
    def text_format(text_inp:str):
        emoji_regex = """|(\ud83d[\ude00-\ude4f])"""
        symbol_regex = """([~!@#$%^&*()_+-\={}|\[\]\\\\:";'<>?,./])"""
        regex = symbol_regex + emoji_regex
        clean_symobl = re.sub(regex," ",text_inp)
        clean_whitespace = re.sub("\\s+"," "," " +clean_symobl+ " ")
        return  clean_whitespace


    # do_fromatÊéßÂà∂ÊòØÂê¶Ëá™Âä®Ê∏ÖÁêÜÁ¨¶Âè∑
    def search(self, text_inp:str, return_json:bool=True, do_format:bool=True):
        text = self.text_format(text_inp) if do_format else text_inp
        word_list = deque()
        for idx,char in enumerate(text):
            if char in self.root.children:
                j = idx
                p = self.root
                while j<len(text) and not p.is_leaf_node() and text[j] in p.children:
                    p = p.children[text[j]]
                    if p.is_end_word :
                        word_list.append(("".join(text[idx:j+1]),p.reason))
                        pass # ËøôÈáå‰∏çÁî®Ë∑≥Ë∑ÉÊÄßÂú∞ËµãÂÄº idx = idx+j,Âõ†‰∏∫Ë¶ÅÂÖºÂÆπÁ±ª‰ºº‰∏≠ÊñáÁöÑËØ≠Áßç,‰ªé "ÊàëÁà±Â§©ÂÆâÈó®" ‰∏≠ÊâæÂà∞"ÊàëÁà±"Âíå"Áà±Â§©ÂÆâÈó®"
                    j += 1
        word_list = [(w.strip(), r) for w,r in word_list]
        word_list = [[k[0], k[1],len(list(g))] for k,g in itertools.groupby(sorted(word_list,key=None),key=None)] # IMPORTANT Ê≥®ÊÑègroupbyÂíåsortedË¶Å‰ΩøÁî®Áõ∏ÂêåÁöÑkey,Âê¶ÂàôgroupbyÂèØËÉΩÂ§±Êïà
        # key‰∏çÊåáÂÆö‰∏∫ËØç,ÊåâwordÂíåreason‰∏ÄËµ∑groupby;Âõ†‰∏∫ÂèØËÉΩÊúâ‰∏Ä‰∏™ËØçÂØπÂ∫îÂ§ö‰∏™reason,Â¶Ç Gaddfi ÂèØËÉΩÂêåÊó∂ÊúâÊîøÊ≤ªÊïèÊÑüÂíåÂÆóÊïô‰∏§‰∏™ÂéüÂõ†
        json_res = json.dumps([{"word":w, "reason":r, "cnt":c} for w,r,c in word_list])
        return json_res if return_json else word_list


if __name__ == '__main__':
    def test_one(content = "   violence violences massacreadwgb violate, purpose, violate purpose, from now on massacre"):
        print(">>> AT TEST-ONE:")
        dfa = DFATree()
        watch_list = {0:["violences", "violence","violence violences", "massacre", "porn",  "kill", "violate","violate purpose"]}
        print(">>> watch_list:",watch_list)
        dfa.init_from_dict(watch_list)
        print(">>> json_res: ",dfa.search(content))
        print(">>> res -h:")
        for i in dfa.search(content,return_json=False): print(i)
        dfa.search(content)

    def test_two(content = "‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§ó‡§∞‡•ç‡§Æ, ‡§ï‡§æ‡§Æ‡§ï‡•ç‡§∞‡•Ä‡§°‡§º‡§æ, ‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä"):
        print("\n\n>>> AT TEST-TWO:")
        dfa = DFATree()
        dfa.init_from_file("/Users/zac/5-Algrithm/python/watch_list.json","json")
        print(">>> json_res: ",dfa.search(content))
        print(">>> res -h:")
        for i in dfa.search(content,return_json=False): print(i)
        dfa.search(content)

    def test_format_hindi():
        print("Âç∞Âú∞ËØ≠ÁúãÁùÄÊòØ‰∏Ä‰∏™Â≠óÂÆûÈôÖ‰∏äÊòØÂ§ö‰∏™Â≠óÁ¨¶:")
        hindi = "‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§ó‡§∞‡•ç‡§Æ ‡§µ‡•Ä‡§∞‡•ç‡§Ø ‡§π‡§ø‡§≤‡§§‡•Ä ‡§ï‡§æ‡§∞"
        print(len(hindi))
        for i in hindi:
            print(i)
            print(i in hindi)
        print(hindi)
        print(DFATree.text_format(hindi))
        print("Âç∞Âú∞ËØ≠ÁöÑ re.sub: ")
        content = " ‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§ó‡§∞‡•ç‡§Æ , ‡§ï‡§æ‡§Æ‡§ï‡•ç‡§∞‡•Ä‡§°‡§º‡§æ , ‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä  ~‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä!‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä@‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä#‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä$‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä%‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä^‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä&‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä*‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä(‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä)‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä_‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä+‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä-‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä=‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä{‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä}‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä|‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä[‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä]‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä\‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä:‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä\"‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä;‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä'‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä<‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä>‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä?‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä,‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä.‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä/‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä'‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä"
        print(content)
        print("re.sub1",re.sub("""~!@#$%‚Ä¶‚Ä¶&\*\(\)_\+`-=\{\}|\[\]\\\\:\";',\./""","\u2717",content))
        print("re.sub2",re.sub("""[~!@#$%^&*()_+-\={}|\[\]\\\\:";'<>?,./]"""," \u2717 ",content))


    # test_one()
    test_two("‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§ó‡§∞‡•ç‡§Æ, ‡§ï‡§æ‡§Æ‡§ï‡•ç‡§∞‡•Ä‡§°‡§º‡§æ, ‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä, ‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§óüëå‡§∞‡•ç‡§Æ")

    # inpupt = sys.argv[1]
    # print("\n\nÂéüÊñá: ",inpupt)
    # dfa = DFATree()
    # dfa.init_from_file("/Users/zac/5-Algrithm/python/watch_list.json","json")
    # print("\nÂà§Êñ≠ÁöÑÁªìÊûú: ",dfa.search(inpupt))
    # for i in dfa.search(inpupt,return_json=False): print(i)

